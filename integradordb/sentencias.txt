INTEGRADOR BASE DE DATOS

Observaciones: 

Al llegar al punto 2.11 me dí cuenta de que había creado una base de datos con el dato presupuesto como que corresponde a cada empleado y que sumados eran el total de cada departamento pero, en realidad, el presupuesto del cuadro inicial era el total de cada departamento. Así que, a partir del punto 2.11, corregí las tablas y datos y rehice los ejercicios previos que correspondían.

También creé la tabla departamentos con el nombre en singular, lo que corregí recién al final de todos los ejercicios.

____________________________________________________

1) Dada la tabla de datos, armar las tablas pertinentes con sus claves primarias y claves
foráneas correspondiente.

//Creación de base de datos:

CREATE DATABASE integradorBD;


//Creación de tabla empleados

CREATE TABLE `integradorbd`.`empleados`(
    `dni` INT(8) NOT NULL,
    `nombre` VARCHAR(12) NOT NULL,
    `apellido` VARCHAR(12) NOT NULL DEFAULT '',
    `departamento` INT(2) NOT NULL,
    `presupuesto` INT(6) NOT NULL,
    PRIMARY KEY(`dni`)
) ENGINE = InnoDB;


//Creación de tabla departamento

CREATE TABLE `integradorbd`.`departamento`(
    numero INT(2) NOT NULL,
    nombre VARCHAR(12) NOT NULL,
    PRIMARY KEY(numero)
);


//Creación de la tabla empleado-departamento

CREATE TABLE `integradorbd`.`empleado_departamento`(
    registro INT(10) NOT NULL,
    dni INT(8) NOT NULL,
    departamento INT(2) NOT NULL,
    PRIMARY KEY(registro)
);


//Inserción datos en tabla departamento

INSERT INTO `departamento`(numero, nombre)
VALUES("14", "Informática");
INSERT INTO `departamento`(numero, nombre)
VALUES("77", "Investigación");
INSERT INTO `departamento`(numero, nombre)
VALUES("15", "Gestión");
INSERT INTO `departamento`(numero, nombre)
VALUES("37", "Desarrollo");
INSERT INTO `departamento`(numero, nombre)
VALUES("16", "Comunicación");


//Control de tabla departamento

SELECT * FROM departamento;


//Corroboración de un dato, aparentemente, mal cargado

SELECT * 
FROM
	departamento
WHERE 
	numero = 77;


//Corrección del dato mal cargado

UPDATE
    departamento
SET
    nombre = 'Investigación'
WHERE
    numero = 77;


//El error persiste debido a que la cantidad de caracteres aceptados es inferior al del nombre. Se corrige la tabla.

ALTER TABLE
    departamento CHANGE nombre nombre VARCHAR(15) NOT NULL;


//Corroboro que se haya corregido la extensión del tipo de dato

DESCRIBE departamento;


//De nuevo corrección del dato mal cargado

UPDATE
    departamento
SET
    nombre = 'Investigación'
WHERE
    numero = 77;


//Inserto datos en tabla empleados. El último registro no se guarda por estar repetido el dni que es la PK.

INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    '31096678',
    'Juan',
    'Lopez',
    '14',
    '80000'
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    '31006675',
    "Martín",
    "Zarabia",
    "77",
    "40000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    '34269854',
    "José",
    "Velez",
    "77",
    "40000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "41369852",
    "Paula",
    "Madariaga",
    "77",
    "40000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "33798521",
    "Pedro",
    "Perez",
    "14",
    "80000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "32698547",
    "Mariana",
    "Lopez",
    "15",
    "95000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "42369854",
    "Abril",
    "Sanchez",
    "37",
    "65000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "36125896",
    "Marti",
    "Julia",
    "14",
    "80000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "36985471",
    "Omar",
    "Diaz",
    "15",
    "95000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "32145698",
    "Guadalupe",
    "Perez",
    "77",
    "40000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "32369854",
    "Bernardo",
    "pantera",
    "37",
    "65000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "36125965",
    "Lucía",
    "Pesaro",
    "14",
    "80000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "31236985",
    "María",
    "diamante",
    "14",
    "80000"
);
INSERT INTO empleados(
    dni,
    nombre,
    apellido,
    departamento,
    presupuesto
)
VALUES(
    "32698547",
    "Carmen",
    "barbieri",
    "16",
    "75000"
);


//Corregí a autoincremental la PK de empleado_departamento

ALTER TABLE
    `empleado_departamento` 
    CHANGE `registro` `registro` INT(2) 
    NOT NULL 
    AUTO_INCREMENT;


2) Realizar las siguientes consultas:

2.1 obtener los apellidos de los empleados

SELECT
    apellido
FROM
    empleados
ORDER BY
    apellido;


2.2 obtener los apellidos de los empleados sin repeticiones.

SELECT DISTINCT
    apellido
FROM
    empleados
ORDER BY
    apellido;


2.3 obtener los datos de los empleados que tengan el apellido Lopez.

SELECT * FROM
    empleados
WHERE 
    apellido = "Lopez";


2.4 obtener los datos de los empleados que tengan el apellido Lopez y los que tengan apellido Perez.

SELECT * FROM
    empleados
WHERE 
    apellido = "Lopez" || apellido = "Perez";


2.5 Obtener todos los datos de los empleados que trabajen en el departamento 14.

SELECT * FROM
    empleados
WHERE 
    departamento = 14;


2.6 Obtener todos los datos de los empleados que trabajen en el departamento 37 y 77.

SELECT * FROM
    empleados
WHERE 
    departamento = 37 || departamento = 77;


2.7 Obtener los datos de los empleados cuyo apellido comience con P.

SELECT * FROM
    empleados
WHERE 
    apellido 
    LIKE "P%";


2.8 Obtener el presupuesto total de todos los departamentos.

SELECT SUM(emp.presupuesto)
FROM	
	empleados emp;


2.9 Obtener un listado completo de empleados, incluyendo por cada empleado los datos del empleado
y de su departamento.

SELECT
    dni,
    empleados.nombre,
    apellido,
    departamento,
    departamento.nombre,
    presupuesto
FROM
    `empleados`
JOIN departamento WHERE empleados.departamento = departamento.numero
ORDER BY
    departamento;


2.10 Obtener un listado completo de empleados, incluyendo el nombre y apellido del empleado junto
al nombre y presupuesto de su departamento.

//Calculo el presupuesto de cada departamento:

SELECT *,
    (
    SELECT
        SUM(emp.presupuesto)
    FROM
        empleados emp
    WHERE
        emp.departamento = dep.numero
) AS total
FROM
    empleados emp
JOIN departamento dep ON
    dep.numero = emp.departamento
    ORDER BY departamento;


2.11 Obtener los nombres y apellidos de los empleados que trabajen en departamentos cuyo
presupuesto sea mayor de 60000

SELECT
    nombre,
    apellido,
    presupuesto
FROM
    empleados
WHERE
    presupuesto > 60000;


//Y al llegar a este punto me doy cuenta de que el presupuesto de cada tupla correspondía al total del departamento y no a cada empleado. Así que a corregir todo...

//Agrego la columna prespuesto a la tabla departamento.

ALTER TABLE departamento ADD presupuesto INT(6) AFTER nombre;


//Actualizo el campo presupuesto de la tabla departamento.

UPDATE `departamento` SET `presupuesto`='80000' WHERE numero = 14;

UPDATE
    `departamento`
SET
    `presupuesto` = '95000'
WHERE
    numero = 15;
UPDATE
    `departamento`
SET
    `presupuesto` = '40000'
WHERE
    numero = 77;
UPDATE
    `departamento`
SET
    `presupuesto` = '65000'
WHERE
    numero = 37;
UPDATE
    `departamento`
SET
    `presupuesto` = '75000'
WHERE
    numero = 16;



//Corroboro:

SELECT * FROM `departamento` WHERE 1

//Elimino columna presupuesto de tabla empleados

ALTER TABLE empleados DROP presupuesto;


//Corroboro:

SELECT * FROM `empleados` WHERE 1;


//Rehago consigna 2.8 Obtener el presupuesto total de todos los departamentos:

SELECT
    SUM(presupuesto)
FROM
    departamento;


//Rehago consigna 2.9. Obtener un listado completo de empleados, incluyendo por cada empleado los datos del empleado y de su departamento:

SELECT
    dni,
    emp.nombre,
    apellido,
    departamento,
    dep.nombre,
    presupuesto
FROM
    empleados emp
JOIN departamento dep ON
    emp.departamento = dep.numero
ORDER BY
    numero;


//Rehago consigna 2.10. Obtener un listado completo de empleados, incluyendo el nombre y apellido del empleado junto al nombre y presupuesto de su departamento:

SELECT
    emp.nombre,
    apellido,
    dep.nombre,
    presupuesto
FROM
    empleados emp
JOIN departamento dep ON
    emp.departamento = dep.numero
ORDER BY
    dep.nombre;


//Rehago consigna 2.11. Obtener los nombres y apellidos de los empleados que trabajen en departamentos cuyo prespuesto sea mayor de 60000:

SELECT * FROM
    `empleados`
JOIN departamento WHERE departamento = numero && presupuesto > 60000
ORDER BY
    numero;


2.12 Añadir un nuevo departamento: "Calidad", con un presupuesto de 40000 y código 11, añadir un empleado vinculado al departamento recién creado: Esther Vazquez, DNI 89267109.

//Añado nuevo departamento:

SELECT * FROM
    `empleados`
JOIN departamento WHERE departamento = numero && presupuesto > 60000
ORDER BY
    numero;


//Chequeo:

SELECT
    *
FROM
    `departamento`
WHERE
    1;


//Añado un nuevo empleado vinculado al nuevo departamento:

INSERT INTO `empleados`(
    dni,
    nombre,
    apellido,
    departamento
)
VALUES('89267109', 'Esther', 'Vazquez', 11);


//Chequeo:

SELECT * FROM `empleados` WHERE 1;


2.13 Aplicar un recorte presupuestario del 10% a todos los departamentos.

UPDATE
    `departamento`
SET
    `presupuesto` =(
        presupuesto -(presupuesto * 10)
    );


//Chequeo:

SELECT * FROM `departamento` WHERE 1;


//Quedaron con números negativos debido a una operación errónea así que, vuelvo a actualizar la tabla departamentos con los presupuestos originales.

UPDATE
    `departamento`
SET
    `presupuesto` = 80000
WHERE
    numero = 14;
UPDATE
    `departamento`
SET
    `presupuesto` = 40000
WHERE
    numero = 77;
UPDATE
    `departamento`
SET
    `presupuesto` = 95000
WHERE
    numero = 15;
UPDATE
    `departamento`
SET
    `presupuesto` = 65000
WHERE
    numero = 37;
UPDATE
    `departamento`
SET
    `presupuesto` = 75000
WHERE
    numero = 16;
UPDATE
    `departamento`
SET
    `presupuesto` = 40000
WHERE
    numero = 11;


//Vuelvo a actualizar con la fómula correcta:

UPDATE
    `departamento`
SET
    `presupuesto` =(
        presupuesto -(presupuesto * (10/100))
    );


//Chequeo

SELECT * FROM `departamento` WHERE 1

2.14 Reasignar a los empleados del departamento de investigación (código 77) al departamento de
informática (código 14)

UPDATE
    `empleados`
SET
    `departamento` = '14'
WHERE
    departamento = 77;


//Chequeo

SELECT
    *
FROM
    `empleados`
ORDER BY
    departamento;

2.15 Despedir a los empleados del departamento de informática (código 14).

DELETE
FROM
    `empleados`
WHERE
    departamento = 14;


//Chequeo.

DELETE
FROM
    `empleados`
WHERE
    departamento = 14;


2.16 Despedir a los empleados que trabajen en departamentos con un presupuesto superior a 90000.

DELETE
FROM
    `empleados`
WHERE
    departamento =(
    SELECT
        numero
    FROM
        departamento
    WHERE
        presupuesto > 90000
);


//Después del descuento del 10% no hay departamentos con prespuestos superiores a 90000 por lo que no elimina ninguno.

//Para probar modifico la consigna a añado un nuevo departamento y empleado vinculados con un presupuesto superior a 90000.

//Departamento
INSERT INTO `departamento`(`numero`, `nombre`, `presupuesto`) VALUES ("20", "Contabilidad", "95000");

//Empleados
INSERT INTO `empleados`(
    `dni`,
    `nombre`,
    `apellido`,
    `departamento`
)
VALUES(23098743, "Esteban", "Aguilar", 20);


//Despido los empleados que pertenecen a departamentos con presupuestos superiores a 90000.

DELETE
FROM
    `empleados`
WHERE
    departamento =(
    SELECT
        numero
    FROM
        departamento
    WHERE
        presupuesto > 90000
);


//Chequeo:
 


Observaciones: al llegar al punto 2.11 me dí cuenta de que había creado una tabla con el dato prespuesto como que corresponde a cada empleado y que sumados eran el total de cada departamento pero, en realidad, el presupuesto era el total de cada departamento. Así que corregí las tablas y datos y rehice los ejercicios que correspondían.

También creé la tabla departamentos con el nombre en singular, lo que corregí recién al final de todos los ejercicios.